* Support packages
Not sure what all of these do, but they are necesary 
** Use-package
#+BEGIN_SRC elisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" .(global-git-gutter-mode +1) "https://melpa.org/packages/"))
(package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+END_SRC
** miscelaneous
#+BEGIN_SRC elisp
(use-package f
  :ensure t)
(use-package s
  :ensure t)
(use-package ein
  :ensure t)
(use-package diminish
  :ensure t)
(use-package bind-key
  :ensure t)
(use-package cl
  :ensure t)
(use-package avy
  :ensure t
  :commands avy-goto-word-1 avy-goto-char-1 avy-goto-line avy-goto-char-timer
  :bind (("s-." . avy-goto-word-or-subword-1)
         ("s-," . avy-goto-char)
         ("C-l"     . avy-goto-word-1))
)
#+END_SRC
** Support packages 
#+BEGIN_SRC elisp
(use-package sql-indent
  :ensure t)
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))
(use-package flycheck
  :ensure t
  :config
  (global-flycheck-mode))
(use-package auto-complete
  :ensure t
  :config
  (ac-config-default))
#+END_SRC
** Swiper
#+BEGIN_SRC elisp
;; it looks like counsel is a requirement for swiper
(use-package counsel
  :ensure t
  )
(use-package swiper
  :init (ivy-mode 1)
  :ensure t
  :bind (
         ("C-s" . swiper)
         ("C-r" . swiper)
         ("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-c C-r" . ivy-resume)
         ("<f6>" . ivy-resume)
         ("C-c h m" . woman)
         ("C-x b" . ivy-switch-buffer)
         ("C-c u" . swiper-all)
         ("<f1> f" . counsel-describe-function)
         ("<f1> v" . counsel-describe-variable)
         ("<f1> l" . counsel-load-library)
         ("<f2> i" . counsel-info-lookup-symbol)
         ("<f2> u" . counsel-unicode-char)
         ("C-c g" . counsel-git)
         ("C-c j" . counsel-git-grep)
         ("C-c k" . counsel-ag)
         ("C-x l" . counsel-locate)
         ("C-S-o" . counsel-rhythmbox)
         )
  :config
  (setq ivy-use-virtual-buffers t
        ivy-count-format "%d/%d ")
  (setq projectile-completion-system 'ivy)                   ;; Habilitamos ivy en projectile
  (setq magit-completing-read-function 'ivy-completing-read) ;; Habilitamos ivy en magit
  ;; Tomado de scimax
  (ivy-set-actions
   t
   '(("i" (lambda (x) (with-ivy-window
                        (insert x))) "insert candidate")
     (" " (lambda (x) (ivy-resume)) "resume")
     ("?" (lambda (x)
            (interactive)
            (describe-keymap ivy-minibuffer-map)) "Describe keys")))
  ;; ** Acciones para counsel-find-file
  ;; Tomado de scimax
  (ivy-add-actions
   'counsel-find-file
   '(("a" (lambda (x)
            (unless (memq major-mode '(mu4e-compose-mode message-mode))
              (compose-mail))
            (mml-attach-file x)) "Attach to email")
     ("c" (lambda (x) (kill-new (f-relative x))) "Copy relative path")
     ("4" (lambda (x) (find-file-other-window x)) "Open in new window")
     ("5" (lambda (x) (find-file-other-frame x)) "Open in new frame")
     ("C" (lambda (x) (kill-new x)) "Copy absolute path")
     ("d" (lambda (x) (dired x)) "Open in dired")
     ("D" (lambda (x) (delete-file x)) "Delete file")
     ("e" (lambda (x) (shell-command (format "open %s" x)))
      "Open in external program")
     ("f" (lambda (x)
            "Open X in another frame."
            (find-file-other-frame x))
      "Open in new frame")
     ("p" (lambda (path)
            (with-ivy-window
              (insert (f-relative path))))
      "Insert relative path")
     ("P" (lambda (path)
            (with-ivy-window
              (insert path)))
      "Insert absolute path")
     ("l" (lambda (path)
            "Insert org-link with relative path"
            (with-ivy-window
              (insert (format "[[./%s]]" (f-relative path)))))
      "Insert org-link (rel. path)")
     ("L" (lambda (path)
            "Insert org-link with absolute path"
            (with-ivy-window
              (insert (format "[[%s]]" path))))
      "Insert org-link (abs. path)")
     ("r" (lambda (path)
            (rename-file path (read-string "New name: ")))
      "Rename")))
  )

(use-package counsel-projectile
  :ensure t
  :after counsel
  :config
  (counsel-projectile-on)
  )

#+END_SRC
** Autocompile
#+BEGIN_SRC elisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC
* For Languages
** Magit
#+BEGIN_SRC elisp
(use-package magit-gitflow
  :ensure t
  :after magit
  :disabled
  :init
  (progn
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)  ;; Keybing: C-f en la ventana de magit
    ))
#+END_SRC
** Latex
#+BEGIN_SRC elisp
(use-package auctex
  :defer t
  :ensure t)
#+END_SRC
** Docker
#+BEGIN_SRC elisp
(use-package docker :ensure t)
(use-package docker-tramp :ensure t)
(use-package dockerfile-mode :ensure t)
#+END_SRC
** Markdown
#+BEGIN_SRC elisp 
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
* For file types
** Csv's
#+BEGIN_SRC elisp
(use-package csv-nav
  :ensure t
  )

(use-package csv-mode
  :ensure t
  :mode "\\.[PpTtCc][Ss][Vv]\\'"
  
  :config
  (progn
    (setq csv-separators '("," ";" "|" " " "\t"))
    )
  )
#+END_SRC
** JSON
#+BEGIN_SRC elisp
(use-package json-mode
  :ensure t)
#+END_SRC
* Mac OS
** Keybindings
#+BEGIN_SRC elisp
(cond
 ((string-equal system-type "darwin") ; Mac OS X
  (progn
    (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin:/usr/local/bin/:$HOME/.pyenv/shims"))
  (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
  (global-set-key (kbd "M-ñ") '(lambda () (interactive) (insert "~")))
  (global-set-key (kbd "M-º") '(lambda () (interactive) (insert "\\")))
  (global-set-key (kbd "M-2") '(lambda () (interactive) (insert "@")))
  (global-set-key (kbd "M-1") '(lambda () (interactive) (insert "|")))
  (global-set-key (kbd "M-ç") '(lambda () (interactive) (insert "}")))
  (global-set-key (kbd "M-+") '(lambda () (interactive) (insert "]")))
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (message "Mac OS X")
  ))
 )
#+END_SRC

